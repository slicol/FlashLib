package slicol.starling.ps.math
{
	import flash.display.BitmapData;
	import flash.geom.Point;
	import flash.geom.Vector3D;

	public class PerlinNoise
	{
		private var A:Vector.<int> = new Vector.<int>(3);
		private var s:Number, u:Number, v:Number, w:Number;
		private var i:int, j:int, k:int;
		private var onethird:Number = 0.333333333;
		private var onesixth:Number = 0.166666667;
		private var T:Vector.<int> = null;
		
		public function PerlinNoise() 
		{
			if (T == null) 
			{
				T = new Vector.<int>(8);
				for (var q:int = 0; q < 8; q++)
				{
					T[q] = Math.random() * int.MAX_VALUE;
				}
			}
		}
		
		public function PerlinNoise1(seed:String):void 
		{
			T = new int[8];
			
			var seed_parts:Vector.<String> = Vector.<String>(seed.split(' '));
			
			for(var q:int = 0; q < 8; q++) 
			{
				var b:int;
				try 
				{
					b = int(seed_parts[q]);
				} 
				catch (e:Error)
				{
					b = 0x0;
				}
				T[q] = b;
			}
		}
		
		public function PerlinNoise2(seed:Vector.<int>):void 
		{ // {0x16, 0x38, 0x32, 0x2c, 0x0d, 0x13, 0x07, 0x2a}
			T = seed;
		}
		
		public function GetSeed():String 
		{
			var seed:String = "";
			
			for(var q:int =0; q < 8; q++) 
			{
				seed += T[q].toString();
				if(q < 7)
				{
					seed += " ";
				}
			}
			
			return seed;
		}
		
		//public float coherentNoise(float x, float y, float z, int octaves=1, int multiplier = 25, float amplitude = 0.5f, float lacunarity = 2, float persistence = 0.9f) {
		public function coherentNoise(x:Number, y:Number, z:Number, octaves:int, multiplier:int, amplitude:Number, lacunarity:Number, persistence:Number):Number 
		{
			var v3:Vector3D = new Vector3D(x,y,z);
			v3.scaleBy(1/multiplier);
			var val:Number = 0;
			for (var n:int = 0; n < octaves; n++) 
			{
				val += noise(v3.x,v3.y,v3.z) * amplitude;
				//v3 *= lacunarity;
				v3.scaleBy(lacunarity);
				amplitude *= persistence;
			}
			return val;
		}
		
		public function getDensity(loc:Vector3D):int
		{
			var val:Number = coherentNoise(loc.x, loc.y, loc.z,1,25,0.5,2,0.9);
	
			return int(Lerp(0,255,val));
		}
		
		public function Lerp(from:Number, to:Number, t:Number):Number
		{
			return (to - from)*t + from;
		}
		
		// Simplex Noise Generator
		public function noise(x:Number, y:Number, z:Number):Number
		{
			s = (x + y + z) * onethird;
			i = fastfloor(x + s);
			j = fastfloor(y + s);
			k = fastfloor(z + s);
			
			s = (i + j + k) * onesixth;
			u = x - i + s;
			v = y - j + s;
			w = z - k + s;
			
			A[0] = 0; A[1] = 0; A[2] = 0;
			
			var hi:int = u >= w ? u >= v ? 0 : 1 : v >= w ? 1 : 2;
			var lo:int = u < w ? u < v ? 0 : 1 : v < w ? 1 : 2;
			
			return kay(hi) + kay(3 - hi - lo) + kay(lo) + kay(0);
		}
		
		private function kay(a:int):Number
		{
			s = (A[0] + A[1] + A[2]) * onesixth;
			var x:Number = u - A[0] + s;
			var y:Number = v - A[1] + s;
			var z:Number = w - A[2] + s;
			var t:Number = 0.6 - x * x - y * y - z * z;
			var h:int = shuffle(i + A[0], j + A[1], k + A[2]);
			A[a]++;
			if (t < 0) return 0;
			var b5:int = h >> 5 & 1;
			var b4:int = h >> 4 & 1;
			var b3:int = h >> 3 & 1;
			var b2:int = h >> 2 & 1;
			var b1:int = h & 3;
			
			var p:Number = b1 == 1 ? x : b1 == 2 ? y : z;
			var q:Number = b1 == 1 ? y : b1 == 2 ? z : x;
			var r:Number = b1 == 1 ? z : b1 == 2 ? x : y;
			
			p = b5 == b3 ? -p : p;
			q = b5 == b4 ? -q : q;
			r = b5 != (b4 ^ b3) ? -r : r;
			t *= t;
			return 8 * t * t * (p + (b1 == 0 ? q + r : b2 == 0 ? q : r));
		}
		
		private function shuffle(i:int, j:int, k:int):int
		{
			return b(i, j, k, 0) + b(j, k, i, 1) + b(k, i, j, 2) + b(i, j, k, 3) + b(j, k, i, 4) + b(k, i, j, 5) + b(i, j, k, 6) + b(j, k, i, 7);
		}
		
		private function b(i:int, j:int, k:int, B:int):int
		{
			return T[b2(i, B) << 2 | b2(j, B) << 1 | b2(k, B)];
		}
		
		private function b2(N:int, B:int):int
		{
			return N >> B & 1;
		}
		
		private function fastfloor(n:Number):int
		{
			return n > 0 ? int(n) : int(n) - 1;
		}
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18052
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

